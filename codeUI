import cv2
import numpy as np
from keras.models import load_model
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
import os

# T·∫£i m√¥ h√¨nh CNN
model = load_model("face_mnist_style.keras")
class_names = ["Huy", "Khai", "Thinh"]
person_info = {
    "Huy": {
        "T√™n ƒë·∫ßy ƒë·ªß": "ƒê·ªìng Nguy·ªÖn Nh·∫≠t Huy",
        "Tu·ªïi": "19",
        "Ngh·ªÅ nghi·ªáp": "Sinh vi√™n ƒê·∫°i h·ªçc",
        "S·ªü th√≠ch": "L·∫≠p tr√¨nh, Ch∆°i game, ƒê√° b√≥ng",
        "M√¥ t·∫£": "Huy l√† m·ªôt sinh vi√™n xu·∫•t s·∫Øc chuy√™n ng√†nh C√¥ng ngh·ªá Th√¥ng tin. C·∫≠u ·∫•y c√≥ ni·ªÅm ƒëam m√™ v·ªõi l·∫≠p tr√¨nh v√† th∆∞·ªùng tham gia c√°c cu·ªôc thi hackathon. V·ªõi t√≠nh c√°ch th√¢n thi·ªán v√† kh·∫£ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ t·ªët, Huy lu√¥n ƒë∆∞·ª£c b·∫°n b√® v√† th·∫ßy c√¥ y√™u qu√Ω."
    },
    "Khai": {
        "T√™n ƒë·∫ßy ƒë·ªß": "Phan Tr·∫ßn Quang Kh·∫£i",
        "Tu·ªïi": "19",
        "Ngh·ªÅ nghi·ªáp": "K·ªπ s∆∞ ph·∫ßn m·ªÅm",
        "S·ªü th√≠ch": "Nhi·∫øp ·∫£nh, Du l·ªãch, √Çm nh·∫°c",
        "M√¥ t·∫£": "Khai l√† m·ªôt k·ªπ s∆∞ ph·∫ßn m·ªÅm t√†i nƒÉng v·ªõi 2 nƒÉm kinh nghi·ªám t·∫°i c√¥ng ty c√¥ng ngh·ªá h√†ng ƒë·∫ßu. Anh ·∫•y y√™u th√≠ch ch·ª•p ·∫£nh phong c·∫£nh v√† ƒë√£ ƒëi ƒë·∫øn nhi·ªÅu n∆°i tr√™n ƒë·∫•t n∆∞·ªõc Vi·ªát Nam. Khai c√≥ kh·∫£ nƒÉng l√£nh ƒë·∫°o t·ªët v√† lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° ƒë·ªìng nghi·ªáp."
    },
    "Thinh": {
        "T√™n ƒë·∫ßy ƒë·ªß": "Tr·∫ßn VƒÉn Th·ªãnh",
        "Tu·ªïi": "19",
        "Ngh·ªÅ nghi·ªáp": "Thi·∫øt k·∫ø ƒë·ªì h·ªça",
        "S·ªü th√≠ch": "V·∫Ω tranh, ƒê·ªçc s√°ch, N·∫•u ƒÉn",
        "M√¥ t·∫£": "Th·ªãnh l√† m·ªôt designer s√°ng t·∫°o v·ªõi con m·∫Øt th·∫©m m·ªπ t·ªët. C·∫≠u ·∫•y ƒë√£ tham gia nhi·ªÅu d·ª± √°n thi·∫øt k·∫ø l·ªõn v√† lu√¥n t√¨m t√≤i nh·ªØng xu h∆∞·ªõng m·ªõi. Th·ªãnh c√≥ kh·∫£ nƒÉng l√†m vi·ªác ƒë·ªôc l·∫≠p v√† theo nh√≥m r·∫•t t·ªët, lu√¥n mang ƒë·∫øn nh·ªØng gi·∫£i ph√°p thi·∫øt k·∫ø ƒë·ªôc ƒë√°o v√† ·∫•n t∆∞·ª£ng."
    }
}


class FaceRecognitionUI:
    def __init__(self, root):
        self.root = root
        self.root.title("·ª®ng d·ª•ng Nh·∫≠n Di·ªán Khu√¥n M·∫∑t - CNN")
        self.root.geometry("1200x800")
        self.root.configure(bg="#f0f0f0")

        # Bi·∫øn l∆∞u tr·ªØ
        self.image_path = None
        self.cap = None
        self.webcam_running = False
        self.current_frame = None
        self.photo = None
        self.original_image = None
        self.webcam_image = None
        self.create_widgets()
        self.start_webcam()

    def create_widgets(self):
        # Configure style
        style = ttk.Style()
        style.configure('TFrame', background='#f0f0f0')
        style.configure('TLabel', background='#f0f0f0', font=('Arial', 10))
        style.configure('Title.TLabel', background='#f0f0f0', font=('Arial', 20, 'bold'), foreground='#2c3e50')
        style.configure('Result.TLabel', background='#f0f0f0', font=('Arial', 18, 'bold'), foreground='#27ae60')
        style.configure('TButton', font=('Arial', 12), padding=8)
        style.configure('TLabelFrame', font=('Arial', 12, 'bold'), background='#f0f0f0')

        # Main container
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Title
        title_label = ttk.Label(main_frame, text="H·ªÜ TH·ªêNG NH·∫¨N DI·ªÜN KHU√îN M·∫∂T - CNN",
                                style='Title.TLabel')
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))

        # Left frame for controls and info
        left_frame = ttk.Frame(main_frame)
        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 20))

        # Right frame for image/webcam
        right_frame = ttk.Frame(main_frame)
        right_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Selection frame
        select_frame = ttk.Frame(left_frame)
        select_frame.grid(row=0, column=0, pady=(0, 20), sticky=(tk.W, tk.E))

        # Select button
        self.select_btn = ttk.Button(select_frame, text="üìÅ CH·ªåN ·∫¢NH V√Ä NH·∫¨N DI·ªÜN",
                                     command=self.select_and_recognize, width=25)
        self.select_btn.grid(row=0, column=0, padx=(0, 10))

        # Webcam button
        self.webcam_btn = ttk.Button(select_frame, text="üì∑ B·∫¨T/T·∫ÆT WEBCAM",
                                     command=self.toggle_webcam, width=20)
        self.webcam_btn.grid(row=0, column=1)

        # Path label
        self.path_label = ttk.Label(select_frame, text="Ch∆∞a ch·ªçn ·∫£nh n√†o",
                                    foreground="#7f8c8d", font=('Arial', 11))
        self.path_label.grid(row=1, column=0, columnspan=2, pady=(10, 0), sticky=tk.W)

        # Result frame
        result_frame = ttk.LabelFrame(left_frame, text="K·∫æT QU·∫¢ NH·∫¨N DI·ªÜN", padding="15")
        result_frame.grid(row=1, column=0, pady=(0, 20), sticky=(tk.W, tk.E))

        # Result display - centered and larger
        self.result_var = tk.StringVar(value="üîÑ Ch∆∞a c√≥ k·∫øt qu·∫£")
        result_display = tk.Label(result_frame, textvariable=self.result_var,
                                  font=('Arial', 18, 'bold'), foreground="#2c3e50",
                                  background='#ecf0f1', justify=tk.CENTER,
                                  wraplength=400, padx=20, pady=20,
                                  relief=tk.RIDGE, borderwidth=2)
        result_display.grid(row=0, column=0, pady=10)

        # Information frame
        info_frame = ttk.LabelFrame(left_frame, text="TH√îNG TIN CHI TI·∫æT", padding="15")
        info_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Text box for information
        self.info_text = tk.Text(info_frame, width=60, height=15, font=('Arial', 11),
                                 wrap=tk.WORD, state=tk.DISABLED, bg='#ffffff',
                                 relief=tk.FLAT, borderwidth=1, padx=15, pady=15)
        self.info_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Scrollbars for text box
        v_scrollbar = ttk.Scrollbar(info_frame, orient=tk.VERTICAL, command=self.info_text.yview)
        v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))

        h_scrollbar = ttk.Scrollbar(info_frame, orient=tk.HORIZONTAL, command=self.info_text.xview)
        h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))

        self.info_text.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

        # Image/Webcam display frame
        display_frame = ttk.LabelFrame(right_frame, text="XEM TR∆Ø·ªöC ·∫¢NH/WEBCAM", padding="10")
        display_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Image label for displaying selected image or webcam
        self.image_label = tk.Label(display_frame, bg="#2c3e50", width=50, height=30,
                                    relief=tk.SUNKEN, text="Webcam ƒëang kh·ªüi ƒë·ªông...")
        self.image_label.grid(row=0, column=0, pady=10, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Configure grid to expand the label
        display_frame.columnconfigure(0, weight=1)
        display_frame.rowconfigure(0, weight=1)

        # Capture button
        self.capture_btn = ttk.Button(display_frame, text="üì∏ CH·ª§P ·∫¢NH V√Ä NH·∫¨N DI·ªÜN",
                                      command=self.capture_and_recognize, width=30)
        self.capture_btn.grid(row=1, column=0, pady=10)

        # Configure grid weights for resizing
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)

        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)

        left_frame.columnconfigure(0, weight=1)
        left_frame.rowconfigure(2, weight=1)

        right_frame.columnconfigure(0, weight=1)
        right_frame.rowconfigure(0, weight=1)

        info_frame.columnconfigure(0, weight=1)
        info_frame.rowconfigure(0, weight=1)

    def start_webcam(self):
        """Kh·ªüi ƒë·ªông webcam"""
        try:
            self.cap = cv2.VideoCapture(0)
            if not self.cap.isOpened():
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ truy c·∫≠p webcam!")
                return

            self.webcam_running = True
            self.update_webcam()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông webcam: {str(e)}")

    def stop_webcam(self):
        self.webcam_running = False
        if self.cap:
            self.cap.release()
        self.cap = None

    def toggle_webcam(self):
        if self.webcam_running:
            self.stop_webcam()
            self.webcam_btn.configure(text="üì∑ B·∫¨T WEBCAM")
            self.image_label.configure(image='', text="Webcam ƒë√£ t·∫Øt", bg="#2c3e50", fg="white")
        else:
            self.start_webcam()
            self.webcam_btn.configure(text="üì∑ T·∫ÆT WEBCAM")

    def update_webcam(self):
        if self.webcam_running and self.cap and self.cap.isOpened():
            ret, frame = self.cap.read()
            if ret:
                self.webcam_image = frame.copy()
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                # Get current label size
                label_width = self.image_label.winfo_width()
                label_height = self.image_label.winfo_height()

                if label_width <= 1:
                    label_width = 400
                    label_height = 300

                h, w = frame.shape[:2]
                ratio = min(label_width / w, label_height / h)
                new_w, new_h = int(w * ratio), int(h * ratio)

                if new_w < 100: new_w = 100
                if new_h < 100: new_h = 100

                frame_resized = cv2.resize(frame_rgb, (new_w, new_h))
                self.photo = ImageTk.PhotoImage(image=Image.fromarray(frame_resized))
                self.image_label.configure(image=self.photo, text="")

            if self.webcam_running:
                self.root.after(10, self.update_webcam)
        else:
            self.image_label.configure(image='', text="Kh√¥ng c√≥ t√≠n hi·ªáu webcam", bg="#2c3e50", fg="white")

    def display_image(self, image):
        if image is None:
            return

        if len(image.shape) == 3:
            img_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        else:
            img_rgb = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)

        img_pil = Image.fromarray(img_rgb)

        # Get current label size
        label_width = self.image_label.winfo_width()
        label_height = self.image_label.winfo_height()

        if label_width <= 1:
            label_width = 400
            label_height = 300

        w, h = img_pil.size
        ratio = min(label_width / w, label_height / h)
        new_w, new_h = int(w * ratio), int(h * ratio)

        if new_w < 100: new_w = 100
        if new_h < 100: new_h = 100

        img_resized = img_pil.resize((new_w, new_h), Image.Resampling.LANCZOS)
        photo = ImageTk.PhotoImage(img_resized)
        self.image_label.config(image=photo)
        self.image_label.image = photo

    def preprocess_image_for_cnn(self, image):
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho m√¥ h√¨nh CNN"""
        if len(image.shape) == 3:
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        else:
            gray = image

        # Resize v·ªÅ k√≠ch th∆∞·ªõc 60x60 (gi·ªëng training)
        resized = cv2.resize(gray, (60, 60))

        # C√¢n b·∫±ng histogram
        equalized = cv2.equalizeHist(resized)

        # L√†m m·ªù Gaussian
        blurred = cv2.GaussianBlur(equalized, (3, 3), 0)

        # Chu·∫©n h√≥a pixel values
        normalized = blurred.astype("float32") / 255.0

        # Reshape cho CNN: (1, 60, 60, 1)
        cnn_input = normalized.reshape(1, 60, 60, 1)

        return cnn_input

    def capture_and_recognize(self):
        if self.webcam_image is not None:
            self.original_image = self.webcam_image.copy()
            self.display_image(self.original_image)
            self.path_label.configure(text=f"ƒê√£ ch·ª•p ·∫£nh t·ª´ webcam")
            self.recognize_face(self.webcam_image, source="webcam")
        else:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ frame n√†o t·ª´ webcam!")

    def select_and_recognize(self):
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh khu√¥n m·∫∑t",
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp")]
        )
        if file_path:
            self.image_path = file_path
            self.original_image = cv2.imread(file_path)
            if self.original_image is None:
                # Th·ª≠ ƒë·ªçc v·ªõi encoding kh√°c (cho ƒë∆∞·ªùng d·∫´n ti·∫øng Vi·ªát)
                self.original_image = cv2.imdecode(np.fromfile(file_path, dtype=np.uint8), cv2.IMREAD_COLOR)
            if self.original_image is None:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh!")
                return
            self.display_image(self.original_image)
            try:
                self.path_label.configure(text=f"ƒê√£ ch·ªçn: {os.path.basename(file_path)}")
                self.recognize_face(self.original_image, source="file")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {str(e)}")

    def recognize_face(self, image, source="file"):
        if image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán!")
            return

        try:
            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho CNN
            processed_image = self.preprocess_image_for_cnn(image)

            # D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh CNN
            predictions = model.predict(processed_image, verbose=0)
            class_idx = np.argmax(predictions)
            predicted_name = class_names[class_idx]
            confidence = predictions[0][class_idx] * 100

            self.result_var.set(
                f"‚úÖ NH·∫¨N DI·ªÜN TH√ÄNH C√îNG!\n\nK·∫øt qu·∫£: {predicted_name}\nƒê·ªô ch√≠nh x√°c: {confidence:.2f}%")

            self.show_person_info(predicted_name)

        except Exception as e:
            messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra khi nh·∫≠n di·ªán: {str(e)}")
            import traceback
            traceback.print_exc()

    def show_person_info(self, person_name):
        info = person_info.get(person_name, {})

        self.info_text.configure(state=tk.NORMAL)
        self.info_text.delete(1.0, tk.END)

        # Display person information with formatting
        self.info_text.insert(tk.END, f"TH√îNG TIN CHI TI·∫æT - {person_name.upper()}\n\n", "title")
        self.info_text.tag_configure("title", font=('Arial', 14, 'bold'), foreground='#2980b9')

        for key, value in info.items():
            self.info_text.insert(tk.END, f"‚Ä¢ {key}: ", "bold")
            self.info_text.tag_configure("bold", font=('Arial', 11, 'bold'))
            self.info_text.insert(tk.END, f"{value}\n\n")

        self.info_text.configure(state=tk.DISABLED)

    def __del__(self):
        if self.cap:
            self.cap.release()


if __name__ == "__main__":
    root = tk.Tk()
    app = FaceRecognitionUI(root)
    root.protocol("WM_DELETE_WINDOW", lambda: (app.stop_webcam(), root.destroy()))
    root.mainloop()
